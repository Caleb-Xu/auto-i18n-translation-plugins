{"version":3,"file":"index.cjs","sources":["../../src/customLoader/index.ts"],"sourcesContent":["/*\n * @Date: 2025-01-08 11:51:33\n * @LastEditors: xiaoshan\n * @LastEditTime: 2025-02-14 01:02:04\n * @FilePath: /i18n_translation_vite/packages/webpackPluginsAutoI18n/src/customLoader/index.ts\n */\n\nimport { LoaderContext } from 'webpack' // 从 Webpack 导入 LoaderContext 类型，用于上下文类型定义\nimport * as core from 'auto-i18n-plugin-core' // 导入核心处理逻辑（国际化相关功能）\nimport * as babel from '@babel/core' // 导入 Babel，用于在 Loader 中处理并转换代码\n\n/**\n * @description: Loader 配置参数类型定义\n * @example:\n * - 可以通过 Webpack 配置文件或插件传递的参数对象\n * - 参数类型较为宽泛，可根据实际需求扩展字段\n */\ntype option = {\n    [key: string]: any // 任意键值对，用于传递 Loader 配置参数\n}\n\n/**\n * @description: 核心 Loader，用于解析和处理代码，将目标语言提取为国际化的 key-value 映射\n * @param source {string} - 源代码字符串，需要经过当前 Loader 处理的模块内容\n * @returns {string} - 返回经过处理后的代码\n */\nmodule.exports = function (source): string {\n    // 从核心模块中解构出工具函数、选项以及过滤逻辑\n    const { baseUtils, option, filter } = core\n\n    // 获取 Webpack 的 Loader 上下文，方便访问文件路径及其他相关信息\n    const global = this as unknown as LoaderContext<option>\n\n    /**\n     * 黑白名单过滤：\n     * - 首先检查是否在 `includePath` 白名单内；如果不在白名单内直接返回原代码。\n     * - 然后检查是否在 `excludedPath` 黑名单内；如果在黑名单内则返回原代码。\n     */\n    if (\n        option.includePath.length &&\n        !baseUtils.checkAgainstRegexArray(global.resourcePath, option.includePath)\n    ) {\n        return source // 不在白名单目录中的文件，不处理，直接返回原始代码。\n    }\n\n    if (\n        option.excludedPath.length &&\n        baseUtils.checkAgainstRegexArray(global.resourcePath, option.excludedPath)\n    ) {\n        return source // 在黑名单目录中的文件，不处理，直接返回原始代码。\n    }\n\n    try {\n        /**\n         * 使用 Babel 对代码进行分析和转换：\n         * - 通过设置 Babel 的 `transformSync` 方法，可以在当前代码中调用核心模块的过滤逻辑。\n         * - `filter.default` 是一个 Babel 插件，用于只提取内容中符合目标语言的部分。\n         * - `configFile: false` 表示不加载外部的 Babel 配置文件。\n         */\n        let result = babel.transformSync(source, {\n            configFile: false, // 不加载本地 Babel 配置文件\n            plugins: [filter.default] // 使用核心模块提供的 `filter` 插件\n        })\n\n        // 如果转换成功，返回转换后的代码；否则返回空字符串。\n        return result?.code || ''\n    } catch (e) {\n        // 捕捉和打印异常，保证整个构建过程不会中断\n        console.error(e)\n    }\n\n    // 如果在过滤或转换过程中发生异常，返回原始未改动的代码\n    return source\n}\n"],"names":["module","exports","source","baseUtils","core","option","filter","includePath","length","checkAgainstRegexArray","this","resourcePath","excludedPath","result","babel","transformSync","configFile","plugins","default","code","e","console","error"],"mappings":"kWA0BAA,OAAOC,QAAU,SAAUC,GAEf,IAAAC,EAA8BC,EAAID,UAAvBE,EAAmBD,EAAIC,OAAfC,EAAWF,SAUtC,GACIC,EAAOE,YAAYC,SAClBL,EAAUM,uBATAC,KAS8BC,aAAcN,EAAOE,aAE9D,OAAOL,EAGX,GACIG,EAAOO,aAAaJ,QACpBL,EAAUM,uBAhBCC,KAgB6BC,aAAcN,EAAOO,cAE7D,OAAOV,EAGX,IAOI,IAAIW,EAASC,EAAMC,cAAcb,EAAQ,CACrCc,YAAY,EACZC,QAAS,CAACX,EAAOY,WAIrB,OAAOL,aAAM,EAANA,EAAQM,OAAQ,EAC1B,CAAC,MAAOC,GAELC,QAAQC,MAAMF,EAClB,CAGA,OAAOlB,CACX"}