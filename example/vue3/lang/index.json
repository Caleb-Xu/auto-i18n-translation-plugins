{"g5z62":{"zh-cn":"小山","en":"hill","ko":"언덕","ja":"丘"},"1cjag4":{"zh-cn":"12小时","en":"12 hours","ko":"12 시간","ja":"12時間"},"xsbfmc7":{"zh-cn":"自动国际化插件","en":"Automatic internationalization plug-in","ko":"자동 국제화 플러그인","ja":"自動国際化プラグイン"},"g84msj7":{"zh-cn":"月光明媚 测试","en":"moonlight test","ko":"달빛 테스트","ja":"月光テスト"},"6a2b7r7":{"zh-cn":"测试目的，权限","en":"Test purpose, permissions","ko":"테스트 목적, 권한","ja":"テストの目的、権限"},"7clqa33yy":{"zh-cn":"<h1>vite-plugin-auto-i18n</h1><h2>介绍</h2><p>基于谷歌翻译api的vite自动翻译插件，优势——无需改动源码，一键翻译</p><h3>支持</h3><p><em><strong>Vue2、Vue3、React</strong></em></p><p><strong>支持语言：[langFile]</strong></p><h2>特点</h2><ul><li><strong>不影响源代码（不再需要替换源代码中的i18n）。</strong></li><li><strong>一键翻译.</strong></li><li><strong>支持</strong> <code>js, ts, jsx, tsx</code> <strong>和其他类型文件</strong></li></ul><h2>使用</h2><h3>安装</h3><pre><code class=\"undefinedjs\">npm i vite-plugin-auto-i18n -D # yarn add vite-plugin-auto-i18n -D\n    </code></pre><h3>配置</h3><table><thead><tr><th align=\"center\">参数</th><th align=\"center\">类型</th><th align=\"center\">必选</th><th align=\"center\">默认值</th><th align=\"center\">描述</th></tr></thead><tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\"center\"><code>$t</code></td><td align=\"center\">插件转换后切换语言的默认函数</td></tr><tr><td align=\"center\">excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[&quot;$i8n&quot;, &quot;require&quot;, &quot;$$i8n&quot;, &quot;console.log&quot;, &quot;$t&quot;]</code></td><td align=\"center\">标记不会翻译的调用函数</td></tr><tr><td align=\"center\">excludedPattern</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">标记不会翻译的字符串</td></tr><tr><td align=\"center\">excludedPath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[]</code></td><td align=\"center\">不翻译指定目录下文件</td></tr><tr><td align=\"center\">includePath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\//]</code></td><td align=\"center\">翻译指定目录下文件</td></tr><tr><td align=\"center\">globalPath</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td align=\"center\">翻译配置文件生成位置</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>&#39;&#39;</code></td><td align=\"center\">打包后生成文件的位置 比如 ./dist/assets<br>（<code>用于将翻译配置注入打包文件</code>）</td></tr><tr><td align=\"center\">distKey</td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>&#39;&#39;</code></td><td align=\"center\">打包后生成文件的主文件名称，比如index.xxx 默认是index<br>（<code>用于将翻译配置注入打包文件</code>）</td></tr><tr><td align=\"center\">namespace</td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>&#39;&#39;</code></td><td align=\"center\">线上区分当前项目间的翻译配置</td></tr><tr><td align=\"center\">originLang</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\"center\"><code>&#39;zh-cn&#39;</code></td><td align=\"center\">源语言（基于该语言翻译成其他语言）</td></tr><tr><td align=\"center\">targetLangList</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[&#39;en&#39;]</code></td><td align=\"center\">目标语言（原始语言将被翻译成的语言类型，接受一个数组，支持多种语言）<br>支持语言类型（[langFile]）</td></tr><tr><td align=\"center\">buildToDist</td><td align=\"center\">Boolean</td><td align=\"center\">❌</td><td align=\"center\"><code>false</code></td><td align=\"center\">是否将翻译配置打包到主包中</td></tr></tbody></table><p>为什么需要 <strong>buildToDist</strong>?</p><p><code>在vite环境中执行插件后，只生成翻译配置文件。如果您直接构建它，项目将生成翻译配置文件。但翻译配置文件不会立即打包到主包中，您可能需要再次打包。</code></p><p><code>因此，提供了buildToDist选项，当创建翻译配置文件时，它将主动将</code>翻译配置文件打包进 <code>主包，缺陷是您的打包文件可能有两份翻译配置文件</code></p><h3>配置演示</h3><pre><code class=\"undefinedjs\">import vitePluginAutoI18n from &quot;../vitePluginAutoI18n/src/index&quot;;\nimport createVuePlugin from &#39;@vitejs/plugin-vue&#39;;\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\nexport default defineConfig({\n  plugins: [\n    vuePlugin,\n    vitePluginAutoI18n({\n      option: {\n        globalPath: &#39;./lang&#39;,\n        namespace: &#39;lang&#39;,\n        distPath: &#39;./dist/assets&#39;,\n        distKey: &#39;index&#39;\n      }\n    })\n  ]\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undefinedjs\">import &#39;./lang&#39; //  必须在项目的入口文件第一行引入lang文件\n    </code></pre><h3>lang file</h3><h4>演示配置lang文件</h4><pre><code class=\"undefinedjs\">import &#39;../../lang/index&#39;\nimport EN from &#39;../../lang/en/index.mjs&#39;\nimport CN from &#39;../../lang/zh-cn/index.mjs&#39;\nconst langMap = {\n  en: window?.lang?.en || EN,\n  zhcn: window?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem(&#39;lang&#39;) || &#39;zhcn&#39;\nwindow.$t.locale(langMap[lang], &#39;lang&#39;)\n    </code></pre><h4>演示介绍</h4><pre><code class=\"undefinedjs\">import CN from &#39;../../[your globalPath]/[your originLangKey]/index.mjs&#39;\n// 这里只演示了targetLangList长度为零的情况，如果有多种语言就继续往下加\nimport EN from &#39;../../[your globalPath]/[your targetLangList[0]]/index.mjs&#39;\nconst langMap = {\n  [your originLangKey]: window?.[your namespace]?.[your originLangKey] || CN,\n  [your targetLangList[0]]: window?.[your namespace]?.[your targetLangList[0]] || EN\n}\n// window.localStorage.getItem(&#39;lang&#39;) Storing the current language type\nconst lang = window.localStorage.getItem(&#39;lang&#39;) || [your originLangKey](defualt lang),\nwindow.[your translateKey].locale(langMap[lang], [your namespace])\n    </code></pre>","en":"<h1>vite-plugin-auto-i18n</h1><h2>Introduction</h2><p>Vite automatic translation plug-in based on Google Translate API, advantage - no need to change the source code, one-click translation</p>< h3>Support</h3><p><em><strong>Vue2, Vue3, React</strong></em></p><p><strong>Supported languages: [langFile]</strong>< /p><h2>Features</h2><ul><li><strong>Does not affect the source code (no need to replace i18n in the source code anymore). </strong></li><li><strong>One-click translation.</strong></li><li><strong>Support</strong> <code>js, ts, jsx, tsx</code > <strong>And other types of files</strong></li></ul><h2>Use</h2><h3>Install</h3><pre><code class=\"undefinedjs\">npm i vite -plugin-auto-i18n -D # yarn add vite-plugin-auto-i18n -D\n    </code></pre><h3>Configuration</h3><table><thead><tr><th align=\"center\">Parameter</th><th align=\"center\">Type</th ><th align=\"center\">Required</th><th align=\"center\">Default value</th><th align=\"center\">Description</th></tr></thead> <tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\" center\"><code>$t</code></td><td align=\"center\">Default function for switching languages ​​after plug-in conversion</td></tr><tr><td align=\"center\" >excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[\"$i8n\" , \"require\", \"$$i8n\", \"console.log\", \"$t\"]</code></td><td align=\"center\">Mark calling functions that will not be translated</td>< /tr><tr><td align=\"center\">excludedPattern</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align =\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">Mark strings that will not be translated</td></tr><tr ><td align=\"center\">excludedPath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"> <code>[]</code></td><td align=\"center\">Do not translate files in the specified directory</td></tr><tr><td align=\"center\">includePath</td ><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\//]</code ></td><td align=\"center\">Translate files in the specified directory</td></tr><tr><td align=\"center\">globalPath</td><td align=\"center\"> string</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td align=\"center\">Translation configuration File generation location</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">string</td><td align=\"center\">✅< /td><td align=\"center\"><code>''</code></td><td align=\"center\">The location of the generated file after packaging, such as ./dist/assets<br> (<code >Used to inject translation configuration into packaged files</code>)</td></tr><tr><td align=\"center\">distKey</td><td align=\"center\">string</td ><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td><td align=\"center\">The main file of the generated file after packaging Name, such as index.xxx, the default is index<br> (<code>Used to inject translation configuration into the packaged file</code>)</td></tr><tr><td align=\"center\">namespace< /td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td> <td align=\"center\">Distinguish translation configurations between current projects online</td></tr><tr><td align=\"center\">originLang</td><td align=\"center\">string </td><td align=\"center\">❌</td><td align=\"center\"><code>'zh-cn'</code></td><td align=\"center\">Source Language (translated into other languages ​​based on this language)</td></tr><tr><td align=\"center\">targetLangList</td><td align=\"center\">string[]</td>< td align=\"center\">❌</td><td align=\"center\"><code>['en']</code></td><td align=\"center\">Target language (the original language will The language type to be translated into, accepts an array, supports multiple languages)<br>Supports language type ([langFile])</td></tr><tr><td align=\"center\">buildToDist</td ><td align=\"center\">Boolean</td><td align=\"center\">❌</td><td align=\"center\"><code>false</code></td><td align =\"center\">Whether to package the translation configuration into the main package</td></tr></tbody></table><p>Why is <strong>buildToDist</strong> needed?</p><p ><code>After executing the plug-in in the vite environment, only the translation configuration file is generated. If you build it directly, the project will generate translation configuration files. However, the translation configuration files are not immediately packaged into the main package, and you may need to package them again. </code></p><p><code>Therefore, the buildToDist option is provided. When creating a translation configuration file, it will actively package the </code> translation configuration file into the <code>main package. The flaw is that you The package file may have two translation configuration files</code></p><h3>Configuration demonstration</h3><pre><code class=\"undefinedjs\">import vitePluginAutoI18n from \"../vitePluginAutoI18n/src/index \";\nimport createVuePlugin from '@vitejs/plugin-vue';\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\nexport default defineConfig({\n  plugins: [\n    vuePlugin,\n    vitePluginAutoI18n({\n      option: {\n        globalPath: './lang',\n        namespace: 'lang',\n        distPath: './dist/assets',\n        distKey: 'index'\n      }\n    })\n  ]\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undefinedjs\">import './lang' // The lang file must be introduced in the first line of the project's entry file\n    </code></pre><h3>lang file</h3><h4>Demo configuration lang file</h4><pre><code class=\"undefinedjs\">import '../../lang/index '\nimport EN from '../../lang/en/index.mjs'\nimport CN from '../../lang/zh-cn/index.mjs'\nconst langMap = {\n  en: window?.lang?.en || EN,\n  zhcn: window?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem('lang') || 'zhcn'\nwindow.$t.locale(langMap[lang], 'lang')\n    </code></pre><h4>Demo introduction</h4><pre><code class=\"undefinedjs\">import CN from '../../[your globalPath]/[your originLangKey]/index. mjs'\n// Here we only demonstrate the case where the length of targetLangList is zero. If there are multiple languages, continue to add them.\nimport EN from '../../[your globalPath]/[your targetLangList[0]]/index.mjs'\nconst langMap = {\n  [your originLangKey]: window?.[your namespace]?.[your originLangKey] || CN,\n  [your targetLangList[0]]: window?.[your namespace]?.[your targetLangList[0]] || EN\n}\n// window.localStorage.getItem('lang') Storing the current language type\nconst lang = window.localStorage.getItem('lang') || [your originLangKey](defualt lang),\nwindow.[your translateKey].locale(langMap[lang], [your namespace])\n    </code></pre>","ko":"<h1>vite-plugin-auto-i18n</h1><h2>소개</h2><p>Google 번역 API 기반의 Vite 자동 번역 플러그인, 장점 - 소스 코드를 변경할 필요가 없음, 원클릭 번역</p>< h3>지원</h3><p><em><strong>Vue2, Vue3, React</strong></em></p><p><strong>지원 언어: [langFile ]</strong>< /p><h2>기능</h2><ul><li><strong>소스 코드에 영향을 주지 않습니다(더 이상 소스 코드에서 i18n을 교체할 필요가 없습니다). </strong></li><li><strong>원클릭 번역.</strong></li><li><strong>지원</strong> <code>js, ts, jsx, tsx</strong> code > <strong>및 기타 유형의 파일</strong></li></ul><h2>사용</h2><h3>설치</h3><pre><code class=\"undefinejs\">npm 나는 vite -plugin-auto-i18n -D # 원사 추가 vite-plugin-auto-i18n -D\n    </code></pre><h3>구성</h3><table><thead><tr><th align=\"center\">매개변수</th><th align=\"center\">유형</th ><th align=\"center\">필수</th><th align=\"center\">기본값</th><th align=\"center\">설명</th></tr></thead> < tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\" center \"><code>$t</code></td><td align=\"center\">플러그인 변환 후 언어 전환을 위한 기본 기능</td></tr><tr><td align= \"center\" >excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[\" $i8n\" , \"require\", \"$$i8n\", \"console.log\", \"$t\"]</code></td><td align=\"center\">번역되지 않는 호출 함수 표시< /td>< /tr><tr><td align=\"center\">제외된 패턴</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td ><td align =\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">번역되지 않을 문자열 표시</td></ tr><tr ><td align=\"center\">제외 경로</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align= \"center\"> <code>[]</code></td><td align=\"center\">지정된 디렉터리의 파일을 번역하지 않음</td></tr><tr><td align=\"center \">includePath</td ><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\ //]</code ></td><td align=\"center\">지정된 디렉터리의 파일 번역</td></tr><tr><td align=\"center\">globalPath</td>< td align=\"center\"> 문자열</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td 정렬 =\"center\">번역 구성 파일 생성 위치</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">string</td><td align =\"center\">✅< /td><td align=\"center\"><code>''</code></td><td align=\"center\">패키징 후 생성된 파일의 위치(예: ./dist/assets<br> (<code >패키지 파일에 번역 구성을 삽입하는 데 사용</code>)</td></tr><tr><td align=\"center\">distKey</td>< td align=\"center\">문자열</td ><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td><td align= \"center\">패키징 후 생성된 파일의 기본 파일 이름(예: index.xxx), 기본값은 index입니다<br>(<code>패키지 파일에 번역 구성을 삽입하는 데 사용</code>)</td> </tr><tr><td align=\"center\">네임스페이스</td><td align=\"center\">문자열</td><td align=\"center\">✅</td><td align= \"center\"><code>''</code></td> <td align=\"center\">현재 온라인 프로젝트 간의 번역 구성 구별</td></tr><tr><td align=\"center\" >originLang</td><td align=\"center\">문자열 </td><td align=\"center\">❌</td><td align=\"center\"><code>'zh-cn'</ code></td><td align=\"center\">원본 언어(이 언어를 기반으로 다른 언어로 번역됨)</td></tr><tr><td align=\"center\">targetLangList</ td><td align=\"center\">문자열[]</td>< td align=\"center\">❌</td><td align=\"center\"><code>['en']</code> </td><td align=\"center\">대상 언어(원래 언어는 번역할 언어 유형, 배열 허용, 여러 언어 지원)<br>언어 유형 지원([langFile])</td> </tr><tr><td align=\"center\">buildToDist</td ><td align=\"center\">부울</td><td align=\"center\">❌</td><td align= \"center\"><code>false</code></td><td align =\"center\">번역 구성을 기본 패키지에 패키징할지 여부</td></tr></tbody></table> <p><strong>buildToDist</strong>가 필요한 이유는 무엇인가요?</p><p ><code>vite 환경에서 플러그인을 실행한 후 번역 구성 파일만 생성됩니다. 직접 빌드하면 프로젝트에서 번역 구성 파일이 생성됩니다. 그러나 번역 구성 파일은 기본 패키지에 즉시 패키징되지 않으므로 다시 패키징해야 할 수도 있습니다. </code></p><p><code>따라서 buildToDist 옵션이 제공되며, 번역 구성 파일을 생성할 때 </code> 번역 구성 파일을 <code>메인 패키지에 적극적으로 패키징합니다. 결함은 패키지 파일에 두 개의 번역 구성 파일이 있을 수 있다는 것입니다.</code></p><h3>구성 데모</h3><pre><code class=\"undefinejs\">\"../vitePluginAutoI18n/에서 vitePluginAutoI18n을 가져옵니다. 소스/색인 \";\n'@vitejs/plugin-vue'에서 createVuePlugin을 가져옵니다.\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\n기본 정의 구성 내보내기({\n  플러그인: [\n    vue플러그인,\n    vitePluginAutoI18n({\n      옵션: {\n        globalPath: './lang',\n        네임스페이스: 'lang',\n        distPath: './dist/assets',\n        distKey: '색인'\n      }\n    })\n  ]\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undefinejs\">import './lang' // lang 파일은 프로젝트의 첫 번째 줄에 도입되어야 합니다. 항목 파일\n    </code></pre><h3>lang 파일</h3><h4>데모 구성 lang 파일</h4><pre><code class=\"undefinejs\">import '../../lang/index '\n'../../lang/en/index.mjs'에서 EN 가져오기\n'../../lang/zh-cn/index.mjs'에서 CN을 가져옵니다.\nconst langMap = {\n  en: window?.lang?.en || EN,\n  zhcn: 창?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem('lang') || 'zhcn'\nwindow.$t.locale(langMap[lang], 'lang')\n    </code></pre><h4>데모 소개</h4><pre><code class=\"undefinejs\">'../../[your globalPath]/[your OriginLangKey]/index에서 CN을 가져옵니다. mjs'\n// 여기서는 targetLangList의 길이가 0인 경우만 설명하며, 언어가 여러 개인 경우 계속해서 추가합니다.\n'../../[your globalPath]/[your targetLangList[0]]/index.mjs'에서 EN 가져오기\nconst langMap = {\n  [원본LangKey]: window?.[네임스페이스]?.[원본LangKey] || CN,\n  [your targetLangList[0]]: window?.[네 네임스페이스]?.[your targetLangList[0]] || KO\n}\n// window.localStorage.getItem('lang') 현재 언어 유형 저장\nconst lang = window.localStorage.getItem('lang') || [원본LangKey](기본 lang),\nwindow.[당신의 번역 키].locale(langMap[lang], [당신의 네임스페이스])\n    </code></pre>","ja":"<h1>vite-plugin-auto-i18n</h1><h2>概要</h2><p>Google Translate API に基づく Vite 自動翻訳プラグイン、利点 - ソース コードを変更する必要がなく、ワンクリック翻訳</p>< h3>サポート</h3><p><em><strong>Vue2、Vue3、React</strong></em></p><p><strong>サポートされる言語: [langFile ]</strong>< /p><h2>機能</h2><ul><li><strong>ソース コードには影響しません (ソース コード内の i18n を置き換える必要はなくなりました)。 </strong></li><li><strong>ワンクリック翻訳。</strong></li><li><strong>サポート</strong> <code>js、ts、jsx、tsx</ code > <strong>およびその他の種類のファイル</strong></li></ul><h2>使用</h2><h3>インストール</h3><pre><code class=\"undependentjs\">npm私は vite -plugin-auto-i18n -D # 糸を追加 vite-plugin-auto-i18n -D\n    </code></pre><h3>設定</h3><table><thead><tr><th align=\"center\">パラメータ</th><th align=\"center\">タイプ</th ><th align=\"center\">必須</th><th align=\"center\">デフォルト値</th><th align=\"center\">説明</th></tr></thead> < tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">文字列</td><td align=\"center\">❌</td><td align=\" center \"><code>$t</code></td><td align=\"center\">プラグイン変換後の言語切り替えのデフォルト関数</td></tr><tr><td align= \"center\" >excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[\" $i8n\" , \"require\", \"$$i8n\", \"console.log\", \"$t\"]</code></td><td align=\"center\">翻訳されない呼び出し関数をマークします< /td>< /tr><tr><td align=\"center\">excludedPattern</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td ><td align=\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">翻訳されない文字列をマークします</td></ tr><tr ><td align=\"center\">excludedPath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align= \"center\"> <code>[]</code></td><td align=\"center\">指定されたディレクトリ内のファイルを翻訳しません</td></tr><tr><td align=\"center \">includePath</td ><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\ //]</code ></td><td align=\"center\">指定されたディレクトリ内のファイルを翻訳します</td></tr><tr><td align=\"center\">globalPath</td>< td align=\"center\"> 文字列</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td align =\"center\">翻訳設定 ファイル生成場所</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">文字列</td><td align =\"center\">✅< /td><td align=\"center\"><code>''</code></td><td align=\"center\">パッケージ化後に生成されるファイルの場所。 ./dist/assets<br> (<code >パッケージ化されたファイルに翻訳設定を挿入するために使用されます</code>)</td></tr><tr><td align=\"center\">distKey</td>< td align=\"center\">文字列</td ><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td><td align= \"center\">パッケージ化後に生成されるファイルのメイン ファイル 名前 (index.xxx など)、デフォルトはindex<br> (<code>パッケージ化されたファイルに翻訳構成を挿入するために使用されます</code>)</td> </tr><tr><td align=\"center\">名前空間</td><td align=\"center\">文字列</td><td align=\"center\">✅</td><td align= \"center\"><code>\"</code></td> <td align=\"center\">オンラインで現在のプロジェクト間の翻訳設定を区別する</td></tr><tr><td align=\"center\" >originLang</td><td align=\"center\">文字列 </td><td align=\"center\">❌</td><td align=\"center\"><code>'zh-cn'</ code></td><td align=\"center\">ソース言語 (この言語に基づいて他の言語に翻訳されます)</td></tr><tr><td align=\"center\">targetLangList</ td><td align=\"center\">string[]</td>< td align=\"center\">❌</td><td align=\"center\"><code>['en']</code> </td><td align=\"center\">ターゲット言語 (元の言語は翻訳先の言語タイプ、配列を受け入れ、複数の言語をサポートします)<br>言語タイプ ([langFile]) をサポートします</td> </tr><tr><td align=\"center\">buildToDist</td ><td align=\"center\">ブール値</td><td align=\"center\">❌</td><td align= \"center\"><code>false</code></td><td align =\"center\">翻訳設定をメイン パッケージにパッケージ化するかどうか</td></tr></tbody></table> <p><strong>buildToDist</strong> が必要な理由は何ですか?</p><p ><code>vite 環境でプラグインを実行すると、変換設定ファイルのみが生成されます。直接ビルドすると、プロジェクトによって変換構成ファイルが生成されます。ただし、変換構成ファイルはメイン パッケージにすぐにはパッケージ化されないため、再度パッケージ化する必要がある場合があります。 </code></p><p><code>したがって、buildToDist オプションが提供されています。変換構成ファイルを作成するときに、</code> 変換構成ファイルが <code>main パッケージにアクティブにパッケージ化されます。欠陥は、パッケージ ファイルに 2 つの変換設定ファイルが含まれている可能性があることです。</code></p><h3>設定のデモンストレーション</h3><pre><code class=\"undefinejs\">「../vitePluginAutoI18n/」から vitePluginAutoI18n をインポートします。ソース/インデックス \";\n'@vitejs/plugin-vue' から createVuePlugin をインポートします。\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\nデフォルトのdefineConfigをエクスポート({\n  プラグイン: [\n    vueプラグイン、\n    vitePluginAutoI18n({\n      オプション： {\n        グローバルパス: './lang',\n        名前空間: 'lang'、\n        distPath: './dist/assets',\n        distKey: 'インデックス'\n      }\n    })\n  】\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undependentjs\">import './lang' // lang ファイルはプロジェクトの最初の行に導入する必要がありますエントリーファイル\n    </code></pre><h3>lang ファイル</h3><h4>デモ設定の lang ファイル</h4><pre><code class=\"undependentjs\">import '../../lang/index '\n'../../lang/en/index.mjs' から EN をインポート\n「../../lang/zh-cn/index.mjs」から CN をインポートします\nconst langMap = {\n  en: window?.lang?.en || JP、\n  zhcn: window?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem('lang') || 'zhcn'\nwindow.$t.locale(langMap[lang], 'lang')\n    </code></pre><h4>デモの紹介</h4><pre><code class=\"undependentjs\">'../../[your globalPath]/[youroriginLangKey]/index から CN をインポートします。 mjs\n// ここでは targetLangList の長さが 0 の場合のみを示しますが、複数の言語がある場合は続けて追加してください。\n'../../[your globalPath]/[your targetLangList[0]]/index.mjs' から EN をインポートします\nconst langMap = {\n  [あなたのoriginLangKey]: window?.[あなたの名前空間]?.[あなたのoriginLangKey] || CN,\n  [あなたの targetLangList[0]]: window?.[あなたの名前空間]?.[あなたの targetLangList[0]] || JP\n}\n// window.localStorage.getItem('lang') 現在の言語タイプを保存します\nconst lang = window.localStorage.getItem('lang') || [あなたのoriginLangKey](default lang),\nwindow.[あなたのtranslateKey].locale(langMap[lang], [あなたの名前空間])\n    </code></pre>"}}