export default {"g5z62":"hill","1cjag4":"12 hours","xsbfmc7":"Automatic internationalization plug-in","g84msj7":"moonlight test","6a2b7r7":"Test purpose, permissions","7clqa33yy":"<h1>vite-plugin-auto-i18n</h1><h2>Introduction</h2><p>Vite automatic translation plug-in based on Google Translate API, advantage - no need to change the source code, one-click translation</p>< h3>Support</h3><p><em><strong>Vue2, Vue3, React</strong></em></p><p><strong>Supported languages: [langFile]</strong>< /p><h2>Features</h2><ul><li><strong>Does not affect the source code (no need to replace i18n in the source code anymore). </strong></li><li><strong>One-click translation.</strong></li><li><strong>Support</strong> <code>js, ts, jsx, tsx</code > <strong>And other types of files</strong></li></ul><h2>Use</h2><h3>Install</h3><pre><code class=\"undefinedjs\">npm i vite -plugin-auto-i18n -D # yarn add vite-plugin-auto-i18n -D\n    </code></pre><h3>Configuration</h3><table><thead><tr><th align=\"center\">Parameter</th><th align=\"center\">Type</th ><th align=\"center\">Required</th><th align=\"center\">Default value</th><th align=\"center\">Description</th></tr></thead> <tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\" center\"><code>$t</code></td><td align=\"center\">Default function for switching languages ​​after plug-in conversion</td></tr><tr><td align=\"center\" >excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[\"$i8n\" , \"require\", \"$$i8n\", \"console.log\", \"$t\"]</code></td><td align=\"center\">Mark calling functions that will not be translated</td>< /tr><tr><td align=\"center\">excludedPattern</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align =\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">Mark strings that will not be translated</td></tr><tr ><td align=\"center\">excludedPath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"> <code>[]</code></td><td align=\"center\">Do not translate files in the specified directory</td></tr><tr><td align=\"center\">includePath</td ><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\//]</code ></td><td align=\"center\">Translate files in the specified directory</td></tr><tr><td align=\"center\">globalPath</td><td align=\"center\"> string</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td align=\"center\">Translation configuration File generation location</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">string</td><td align=\"center\">✅< /td><td align=\"center\"><code>''</code></td><td align=\"center\">The location of the generated file after packaging, such as ./dist/assets<br> (<code >Used to inject translation configuration into packaged files</code>)</td></tr><tr><td align=\"center\">distKey</td><td align=\"center\">string</td ><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td><td align=\"center\">The main file of the generated file after packaging Name, such as index.xxx, the default is index<br> (<code>Used to inject translation configuration into the packaged file</code>)</td></tr><tr><td align=\"center\">namespace< /td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td> <td align=\"center\">Distinguish translation configurations between current projects online</td></tr><tr><td align=\"center\">originLang</td><td align=\"center\">string </td><td align=\"center\">❌</td><td align=\"center\"><code>'zh-cn'</code></td><td align=\"center\">Source Language (translated into other languages ​​based on this language)</td></tr><tr><td align=\"center\">targetLangList</td><td align=\"center\">string[]</td>< td align=\"center\">❌</td><td align=\"center\"><code>['en']</code></td><td align=\"center\">Target language (the original language will The language type to be translated into, accepts an array, supports multiple languages)<br>Supports language type ([langFile])</td></tr><tr><td align=\"center\">buildToDist</td ><td align=\"center\">Boolean</td><td align=\"center\">❌</td><td align=\"center\"><code>false</code></td><td align =\"center\">Whether to package the translation configuration into the main package</td></tr></tbody></table><p>Why is <strong>buildToDist</strong> needed?</p><p ><code>After executing the plug-in in the vite environment, only the translation configuration file is generated. If you build it directly, the project will generate translation configuration files. However, the translation configuration files are not immediately packaged into the main package, and you may need to package them again. </code></p><p><code>Therefore, the buildToDist option is provided. When creating a translation configuration file, it will actively package the </code> translation configuration file into the <code>main package. The flaw is that you The package file may have two translation configuration files</code></p><h3>Configuration demonstration</h3><pre><code class=\"undefinedjs\">import vitePluginAutoI18n from \"../vitePluginAutoI18n/src/index \";\nimport createVuePlugin from '@vitejs/plugin-vue';\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\nexport default defineConfig({\n  plugins: [\n    vuePlugin,\n    vitePluginAutoI18n({\n      option: {\n        globalPath: './lang',\n        namespace: 'lang',\n        distPath: './dist/assets',\n        distKey: 'index'\n      }\n    })\n  ]\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undefinedjs\">import './lang' // The lang file must be introduced in the first line of the project's entry file\n    </code></pre><h3>lang file</h3><h4>Demo configuration lang file</h4><pre><code class=\"undefinedjs\">import '../../lang/index '\nimport EN from '../../lang/en/index.mjs'\nimport CN from '../../lang/zh-cn/index.mjs'\nconst langMap = {\n  en: window?.lang?.en || EN,\n  zhcn: window?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem('lang') || 'zhcn'\nwindow.$t.locale(langMap[lang], 'lang')\n    </code></pre><h4>Demo introduction</h4><pre><code class=\"undefinedjs\">import CN from '../../[your globalPath]/[your originLangKey]/index. mjs'\n// Here we only demonstrate the case where the length of targetLangList is zero. If there are multiple languages, continue to add them.\nimport EN from '../../[your globalPath]/[your targetLangList[0]]/index.mjs'\nconst langMap = {\n  [your originLangKey]: window?.[your namespace]?.[your originLangKey] || CN,\n  [your targetLangList[0]]: window?.[your namespace]?.[your targetLangList[0]] || EN\n}\n// window.localStorage.getItem('lang') Storing the current language type\nconst lang = window.localStorage.getItem('lang') || [your originLangKey](defualt lang),\nwindow.[your translateKey].locale(langMap[lang], [your namespace])\n    </code></pre>"}