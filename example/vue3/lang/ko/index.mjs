export default {"g5z62":"언덕","1cjag4":"12 시간","xsbfmc7":"자동 국제화 플러그인","g84msj7":"달빛 테스트","6a2b7r7":"테스트 목적, 권한","7clqa33yy":"<h1>vite-plugin-auto-i18n</h1><h2>소개</h2><p>Google 번역 API 기반의 Vite 자동 번역 플러그인, 장점 - 소스 코드를 변경할 필요가 없음, 원클릭 번역</p>< h3>지원</h3><p><em><strong>Vue2, Vue3, React</strong></em></p><p><strong>지원 언어: [langFile ]</strong>< /p><h2>기능</h2><ul><li><strong>소스 코드에 영향을 주지 않습니다(더 이상 소스 코드에서 i18n을 교체할 필요가 없습니다). </strong></li><li><strong>원클릭 번역.</strong></li><li><strong>지원</strong> <code>js, ts, jsx, tsx</strong> code > <strong>및 기타 유형의 파일</strong></li></ul><h2>사용</h2><h3>설치</h3><pre><code class=\"undefinejs\">npm 나는 vite -plugin-auto-i18n -D # 원사 추가 vite-plugin-auto-i18n -D\n    </code></pre><h3>구성</h3><table><thead><tr><th align=\"center\">매개변수</th><th align=\"center\">유형</th ><th align=\"center\">필수</th><th align=\"center\">기본값</th><th align=\"center\">설명</th></tr></thead> < tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\" center \"><code>$t</code></td><td align=\"center\">플러그인 변환 후 언어 전환을 위한 기본 기능</td></tr><tr><td align= \"center\" >excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[\" $i8n\" , \"require\", \"$$i8n\", \"console.log\", \"$t\"]</code></td><td align=\"center\">번역되지 않는 호출 함수 표시< /td>< /tr><tr><td align=\"center\">제외된 패턴</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td ><td align =\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">번역되지 않을 문자열 표시</td></ tr><tr ><td align=\"center\">제외 경로</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align= \"center\"> <code>[]</code></td><td align=\"center\">지정된 디렉터리의 파일을 번역하지 않음</td></tr><tr><td align=\"center \">includePath</td ><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\ //]</code ></td><td align=\"center\">지정된 디렉터리의 파일 번역</td></tr><tr><td align=\"center\">globalPath</td>< td align=\"center\"> 문자열</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td 정렬 =\"center\">번역 구성 파일 생성 위치</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">string</td><td align =\"center\">✅< /td><td align=\"center\"><code>''</code></td><td align=\"center\">패키징 후 생성된 파일의 위치(예: ./dist/assets<br> (<code >패키지 파일에 번역 구성을 삽입하는 데 사용</code>)</td></tr><tr><td align=\"center\">distKey</td>< td align=\"center\">문자열</td ><td align=\"center\">✅</td><td align=\"center\"><code>''</code></td><td align= \"center\">패키징 후 생성된 파일의 기본 파일 이름(예: index.xxx), 기본값은 index입니다<br>(<code>패키지 파일에 번역 구성을 삽입하는 데 사용</code>)</td> </tr><tr><td align=\"center\">네임스페이스</td><td align=\"center\">문자열</td><td align=\"center\">✅</td><td align= \"center\"><code>''</code></td> <td align=\"center\">현재 온라인 프로젝트 간의 번역 구성 구별</td></tr><tr><td align=\"center\" >originLang</td><td align=\"center\">문자열 </td><td align=\"center\">❌</td><td align=\"center\"><code>'zh-cn'</ code></td><td align=\"center\">원본 언어(이 언어를 기반으로 다른 언어로 번역됨)</td></tr><tr><td align=\"center\">targetLangList</ td><td align=\"center\">문자열[]</td>< td align=\"center\">❌</td><td align=\"center\"><code>['en']</code> </td><td align=\"center\">대상 언어(원래 언어는 번역할 언어 유형, 배열 허용, 여러 언어 지원)<br>언어 유형 지원([langFile])</td> </tr><tr><td align=\"center\">buildToDist</td ><td align=\"center\">부울</td><td align=\"center\">❌</td><td align= \"center\"><code>false</code></td><td align =\"center\">번역 구성을 기본 패키지에 패키징할지 여부</td></tr></tbody></table> <p><strong>buildToDist</strong>가 필요한 이유는 무엇인가요?</p><p ><code>vite 환경에서 플러그인을 실행한 후 번역 구성 파일만 생성됩니다. 직접 빌드하면 프로젝트에서 번역 구성 파일이 생성됩니다. 그러나 번역 구성 파일은 기본 패키지에 즉시 패키징되지 않으므로 다시 패키징해야 할 수도 있습니다. </code></p><p><code>따라서 buildToDist 옵션이 제공되며, 번역 구성 파일을 생성할 때 </code> 번역 구성 파일을 <code>메인 패키지에 적극적으로 패키징합니다. 결함은 패키지 파일에 두 개의 번역 구성 파일이 있을 수 있다는 것입니다.</code></p><h3>구성 데모</h3><pre><code class=\"undefinejs\">\"../vitePluginAutoI18n/에서 vitePluginAutoI18n을 가져옵니다. 소스/색인 \";\n'@vitejs/plugin-vue'에서 createVuePlugin을 가져옵니다.\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\n기본 정의 구성 내보내기({\n  플러그인: [\n    vue플러그인,\n    vitePluginAutoI18n({\n      옵션: {\n        globalPath: './lang',\n        네임스페이스: 'lang',\n        distPath: './dist/assets',\n        distKey: '색인'\n      }\n    })\n  ]\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undefinejs\">import './lang' // lang 파일은 프로젝트의 첫 번째 줄에 도입되어야 합니다. 항목 파일\n    </code></pre><h3>lang 파일</h3><h4>데모 구성 lang 파일</h4><pre><code class=\"undefinejs\">import '../../lang/index '\n'../../lang/en/index.mjs'에서 EN 가져오기\n'../../lang/zh-cn/index.mjs'에서 CN을 가져옵니다.\nconst langMap = {\n  en: window?.lang?.en || EN,\n  zhcn: 창?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem('lang') || 'zhcn'\nwindow.$t.locale(langMap[lang], 'lang')\n    </code></pre><h4>데모 소개</h4><pre><code class=\"undefinejs\">'../../[your globalPath]/[your OriginLangKey]/index에서 CN을 가져옵니다. mjs'\n// 여기서는 targetLangList의 길이가 0인 경우만 설명하며, 언어가 여러 개인 경우 계속해서 추가합니다.\n'../../[your globalPath]/[your targetLangList[0]]/index.mjs'에서 EN 가져오기\nconst langMap = {\n  [원본LangKey]: window?.[네임스페이스]?.[원본LangKey] || CN,\n  [your targetLangList[0]]: window?.[네 네임스페이스]?.[your targetLangList[0]] || KO\n}\n// window.localStorage.getItem('lang') 현재 언어 유형 저장\nconst lang = window.localStorage.getItem('lang') || [원본LangKey](기본 lang),\nwindow.[당신의 번역 키].locale(langMap[lang], [당신의 네임스페이스])\n    </code></pre>"}