export default {"g5z62":"小山","1cjag4":"12小时","xsbfmc7":"自动国际化插件","g84msj7":"月光明媚 测试","6a2b7r7":"测试目的，权限","7clqa33yy":"<h1>vite-plugin-auto-i18n</h1><h2>介绍</h2><p>基于谷歌翻译api的vite自动翻译插件，优势——无需改动源码，一键翻译</p><h3>支持</h3><p><em><strong>Vue2、Vue3、React</strong></em></p><p><strong>支持语言：[langFile]</strong></p><h2>特点</h2><ul><li><strong>不影响源代码（不再需要替换源代码中的i18n）。</strong></li><li><strong>一键翻译.</strong></li><li><strong>支持</strong> <code>js, ts, jsx, tsx</code> <strong>和其他类型文件</strong></li></ul><h2>使用</h2><h3>安装</h3><pre><code class=\"undefinedjs\">npm i vite-plugin-auto-i18n -D # yarn add vite-plugin-auto-i18n -D\n    </code></pre><h3>配置</h3><table><thead><tr><th align=\"center\">参数</th><th align=\"center\">类型</th><th align=\"center\">必选</th><th align=\"center\">默认值</th><th align=\"center\">描述</th></tr></thead><tbody><tr><td align=\"center\">translateKey</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\"center\"><code>$t</code></td><td align=\"center\">插件转换后切换语言的默认函数</td></tr><tr><td align=\"center\">excludedCall</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[&quot;$i8n&quot;, &quot;require&quot;, &quot;$$i8n&quot;, &quot;console.log&quot;, &quot;$t&quot;]</code></td><td align=\"center\">标记不会翻译的调用函数</td></tr><tr><td align=\"center\">excludedPattern</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/\\.\\w+$/]</code></td><td align=\"center\">标记不会翻译的字符串</td></tr><tr><td align=\"center\">excludedPath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[]</code></td><td align=\"center\">不翻译指定目录下文件</td></tr><tr><td align=\"center\">includePath</td><td align=\"center\">RegExp[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[/src\\//]</code></td><td align=\"center\">翻译指定目录下文件</td></tr><tr><td align=\"center\">globalPath</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\"center\"><code>./lang</code></td><td align=\"center\">翻译配置文件生成位置</td></tr><tr><td align=\"center\">distPath</td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>&#39;&#39;</code></td><td align=\"center\">打包后生成文件的位置 比如 ./dist/assets<br>（<code>用于将翻译配置注入打包文件</code>）</td></tr><tr><td align=\"center\">distKey</td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>&#39;&#39;</code></td><td align=\"center\">打包后生成文件的主文件名称，比如index.xxx 默认是index<br>（<code>用于将翻译配置注入打包文件</code>）</td></tr><tr><td align=\"center\">namespace</td><td align=\"center\">string</td><td align=\"center\">✅</td><td align=\"center\"><code>&#39;&#39;</code></td><td align=\"center\">线上区分当前项目间的翻译配置</td></tr><tr><td align=\"center\">originLang</td><td align=\"center\">string</td><td align=\"center\">❌</td><td align=\"center\"><code>&#39;zh-cn&#39;</code></td><td align=\"center\">源语言（基于该语言翻译成其他语言）</td></tr><tr><td align=\"center\">targetLangList</td><td align=\"center\">string[]</td><td align=\"center\">❌</td><td align=\"center\"><code>[&#39;en&#39;]</code></td><td align=\"center\">目标语言（原始语言将被翻译成的语言类型，接受一个数组，支持多种语言）<br>支持语言类型（[langFile]）</td></tr><tr><td align=\"center\">buildToDist</td><td align=\"center\">Boolean</td><td align=\"center\">❌</td><td align=\"center\"><code>false</code></td><td align=\"center\">是否将翻译配置打包到主包中</td></tr></tbody></table><p>为什么需要 <strong>buildToDist</strong>?</p><p><code>在vite环境中执行插件后，只生成翻译配置文件。如果您直接构建它，项目将生成翻译配置文件。但翻译配置文件不会立即打包到主包中，您可能需要再次打包。</code></p><p><code>因此，提供了buildToDist选项，当创建翻译配置文件时，它将主动将</code>翻译配置文件打包进 <code>主包，缺陷是您的打包文件可能有两份翻译配置文件</code></p><h3>配置演示</h3><pre><code class=\"undefinedjs\">import vitePluginAutoI18n from &quot;../vitePluginAutoI18n/src/index&quot;;\nimport createVuePlugin from &#39;@vitejs/plugin-vue&#39;;\nconst vuePlugin = createVuePlugin({ include: [/\\.vue$/] })\nexport default defineConfig({\n  plugins: [\n    vuePlugin,\n    vitePluginAutoI18n({\n      option: {\n        globalPath: &#39;./lang&#39;,\n        namespace: &#39;lang&#39;,\n        distPath: &#39;./dist/assets&#39;,\n        distKey: &#39;index&#39;\n      }\n    })\n  ]\n});\n    </code></pre><h3>main.js</h3><pre><code class=\"undefinedjs\">import &#39;./lang&#39; //  必须在项目的入口文件第一行引入lang文件\n    </code></pre><h3>lang file</h3><h4>演示配置lang文件</h4><pre><code class=\"undefinedjs\">import &#39;../../lang/index&#39;\nimport EN from &#39;../../lang/en/index.mjs&#39;\nimport CN from &#39;../../lang/zh-cn/index.mjs&#39;\nconst langMap = {\n  en: window?.lang?.en || EN,\n  zhcn: window?.lang?.zhcn || CN\n}\nconst lang = window.localStorage.getItem(&#39;lang&#39;) || &#39;zhcn&#39;\nwindow.$t.locale(langMap[lang], &#39;lang&#39;)\n    </code></pre><h4>演示介绍</h4><pre><code class=\"undefinedjs\">import CN from &#39;../../[your globalPath]/[your originLangKey]/index.mjs&#39;\n// 这里只演示了targetLangList长度为零的情况，如果有多种语言就继续往下加\nimport EN from &#39;../../[your globalPath]/[your targetLangList[0]]/index.mjs&#39;\nconst langMap = {\n  [your originLangKey]: window?.[your namespace]?.[your originLangKey] || CN,\n  [your targetLangList[0]]: window?.[your namespace]?.[your targetLangList[0]] || EN\n}\n// window.localStorage.getItem(&#39;lang&#39;) Storing the current language type\nconst lang = window.localStorage.getItem(&#39;lang&#39;) || [your originLangKey](defualt lang),\nwindow.[your translateKey].locale(langMap[lang], [your namespace])\n    </code></pre>"}